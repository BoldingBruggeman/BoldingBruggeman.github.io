var tipuesearch = {"pages":[{"title":" FABM in UVic ","text":"FABM in UVic Developer Info Karsten Bolding,\nNicolas Schnedler-Meyer and\nJorn Bruggeman","tags":"home","loc":"index.html"},{"title":"fabm_configure – FABM in UVic","text":"public  subroutine fabm_configure(dt) read fabm.yaml and call FABM configuration subroutines Note seems tmask is not initialised until called in mom() -\ni.e. after initialization - so all values are 0 here Arguments Type Intent Optional Attributes Name real(kind=rke), intent(in) :: dt bio-geochemical time step as set by MOM2 [s] Calls proc~~fabm_configure~~CallsGraph proc~fabm_configure uvic_fabm::fabm_configure fabm_create_model fabm_create_model proc~fabm_configure->fabm_create_model set_bottom_index set_bottom_index proc~fabm_configure->set_bottom_index set_domain set_domain proc~fabm_configure->set_domain set_domain_start set_domain_start proc~fabm_configure->set_domain_start set_domain_stop set_domain_stop proc~fabm_configure->set_domain_stop set_mask set_mask proc~fabm_configure->set_mask Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/fabm_configure.html"},{"title":"fabm_link_data – FABM in UVic","text":"public  subroutine fabm_link_data() link all FABM configured external dependencies - and call\nmodel%start() to assure proper configuration Arguments None Calls proc~~fabm_link_data~~CallsGraph proc~fabm_link_data uvic_fabm::fabm_link_data interior_state_variables interior_state_variables proc~fabm_link_data->interior_state_variables link_interior_data link_interior_data proc~fabm_link_data->link_interior_data link_interior_state_data link_interior_state_data proc~fabm_link_data->link_interior_state_data proc~link_bottom_stress uvic_fabm::link_bottom_stress proc~fabm_link_data->proc~link_bottom_stress proc~link_density uvic_fabm::link_density proc~fabm_link_data->proc~link_density proc~link_grid uvic_fabm::link_grid proc~fabm_link_data->proc~link_grid proc~link_mole_fraction_of_carbon_dioxide_in_air uvic_fabm::link_mole_fraction_of_carbon_dioxide_in_air proc~fabm_link_data->proc~link_mole_fraction_of_carbon_dioxide_in_air proc~link_salinity uvic_fabm::link_salinity proc~fabm_link_data->proc~link_salinity proc~link_surface_downwelling_shortwave_flux uvic_fabm::link_surface_downwelling_shortwave_flux proc~fabm_link_data->proc~link_surface_downwelling_shortwave_flux proc~link_wind uvic_fabm::link_wind proc~fabm_link_data->proc~link_wind start start proc~fabm_link_data->start get_horizontal_variable_id get_horizontal_variable_id proc~link_bottom_stress->get_horizontal_variable_id link_horizontal_data link_horizontal_data proc~link_bottom_stress->link_horizontal_data variable_needs_values variable_needs_values proc~link_bottom_stress->variable_needs_values proc~link_density->link_interior_data get_interior_variable_id get_interior_variable_id proc~link_density->get_interior_variable_id proc~link_density->variable_needs_values proc~link_grid->link_interior_data proc~link_mole_fraction_of_carbon_dioxide_in_air->get_horizontal_variable_id proc~link_mole_fraction_of_carbon_dioxide_in_air->link_horizontal_data proc~link_mole_fraction_of_carbon_dioxide_in_air->variable_needs_values proc~link_salinity->link_interior_data proc~link_salinity->get_interior_variable_id proc~link_salinity->variable_needs_values proc~link_surface_downwelling_shortwave_flux->get_horizontal_variable_id proc~link_surface_downwelling_shortwave_flux->link_horizontal_data proc~link_surface_downwelling_shortwave_flux->variable_needs_values proc~link_wind->get_horizontal_variable_id proc~link_wind->link_horizontal_data proc~link_wind->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/fabm_link_data.html"},{"title":"fabm_list – FABM in UVic","text":"public  subroutine fabm_list() lists all FABM configured variables Arguments None Calls proc~~fabm_list~~CallsGraph proc~fabm_list uvic_fabm::fabm_list bottom_state_variables bottom_state_variables proc~fabm_list->bottom_state_variables interior_state_variables interior_state_variables proc~fabm_list->interior_state_variables surface_state_variables surface_state_variables proc~fabm_list->surface_state_variables Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/fabm_list.html"},{"title":"fabm_update – FABM in UVic","text":"public  subroutine fabm_update(joff, js, je, is, ie) update the environment and calculate the source/sink terms\ncall with the same argument list as mom() calls tracer() i.e.\nthe specification on the active UVic window - typically the\nfull domain on modern hardware Arguments Type Intent Optional Attributes Name integer, intent(in) :: joff offset row in global window integer, intent(in) :: js start row integer, intent(in) :: je end row integer, intent(in) :: is start column integer, intent(in) :: ie end column Calls proc~~fabm_update~~CallsGraph proc~fabm_update uvic_fabm::fabm_update finalize_outputs finalize_outputs proc~fabm_update->finalize_outputs get_interior_sources get_interior_sources proc~fabm_update->get_interior_sources prepare_inputs prepare_inputs proc~fabm_update->prepare_inputs proc~update_data uvic_fabm::update_data proc~fabm_update->proc~update_data proc~update_bottom_stress uvic_fabm::update_bottom_stress proc~update_data->proc~update_bottom_stress proc~update_density uvic_fabm::update_density proc~update_data->proc~update_density proc~update_mole_fraction_of_carbon_dioxide_in_air uvic_fabm::update_mole_fraction_of_carbon_dioxide_in_air proc~update_data->proc~update_mole_fraction_of_carbon_dioxide_in_air proc~update_salinity uvic_fabm::update_salinity proc~update_data->proc~update_salinity proc~update_surface_downwelling_shortwave_flux uvic_fabm::update_surface_downwelling_shortwave_flux proc~update_data->proc~update_surface_downwelling_shortwave_flux proc~update_wind uvic_fabm::update_wind proc~update_data->proc~update_wind variable_needs_values variable_needs_values proc~update_bottom_stress->variable_needs_values proc~update_density->variable_needs_values proc~update_mole_fraction_of_carbon_dioxide_in_air->variable_needs_values proc~update_salinity->variable_needs_values proc~update_surface_downwelling_shortwave_flux->variable_needs_values proc~update_wind->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/fabm_update.html"},{"title":"fabm_clean – FABM in UVic","text":"public  subroutine fabm_clean() de-allocate all allocated arrays Arguments None","tags":"","loc":"proc/fabm_clean.html"},{"title":"update_data – FABM in UVic","text":"private  subroutine update_data(joff) Arguments Type Intent Optional Attributes Name integer, intent(in) :: joff offset row in global window\nupdate all time varying FABM configured external dependencies\nby calling individual update routines - tests done in routines Calls proc~~update_data~~CallsGraph proc~update_data uvic_fabm::update_data proc~update_bottom_stress uvic_fabm::update_bottom_stress proc~update_data->proc~update_bottom_stress proc~update_density uvic_fabm::update_density proc~update_data->proc~update_density proc~update_mole_fraction_of_carbon_dioxide_in_air uvic_fabm::update_mole_fraction_of_carbon_dioxide_in_air proc~update_data->proc~update_mole_fraction_of_carbon_dioxide_in_air proc~update_salinity uvic_fabm::update_salinity proc~update_data->proc~update_salinity proc~update_surface_downwelling_shortwave_flux uvic_fabm::update_surface_downwelling_shortwave_flux proc~update_data->proc~update_surface_downwelling_shortwave_flux proc~update_wind uvic_fabm::update_wind proc~update_data->proc~update_wind variable_needs_values variable_needs_values proc~update_bottom_stress->variable_needs_values proc~update_density->variable_needs_values proc~update_mole_fraction_of_carbon_dioxide_in_air->variable_needs_values proc~update_salinity->variable_needs_values proc~update_surface_downwelling_shortwave_flux->variable_needs_values proc~update_wind->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~update_data~~CalledByGraph proc~update_data uvic_fabm::update_data proc~fabm_update uvic_fabm::fabm_update proc~fabm_update->proc~update_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/update_data.html"},{"title":"link_grid – FABM in UVic","text":"private  subroutine link_grid() Allocate and link grid related FABM standard variables that\nare being transformed from UVic native variables [cm -> m]. Arguments None Calls proc~~link_grid~~CallsGraph proc~link_grid uvic_fabm::link_grid link_interior_data link_interior_data proc~link_grid->link_interior_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~link_grid~~CalledByGraph proc~link_grid uvic_fabm::link_grid proc~fabm_link_data uvic_fabm::fabm_link_data proc~fabm_link_data->proc~link_grid Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/link_grid.html"},{"title":"link_wind – FABM in UVic","text":"private  subroutine link_wind() get wind speed FABM standard variable and if needed by FABM\nallocate memory Arguments None Calls proc~~link_wind~~CallsGraph proc~link_wind uvic_fabm::link_wind get_horizontal_variable_id get_horizontal_variable_id proc~link_wind->get_horizontal_variable_id link_horizontal_data link_horizontal_data proc~link_wind->link_horizontal_data variable_needs_values variable_needs_values proc~link_wind->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~link_wind~~CalledByGraph proc~link_wind uvic_fabm::link_wind proc~fabm_link_data uvic_fabm::fabm_link_data proc~fabm_link_data->proc~link_wind Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/link_wind.html"},{"title":"update_wind – FABM in UVic","text":"private  subroutine update_wind() calculate wind speed in m/s according to Arguments None Calls proc~~update_wind~~CallsGraph proc~update_wind uvic_fabm::update_wind variable_needs_values variable_needs_values proc~update_wind->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~update_wind~~CalledByGraph proc~update_wind uvic_fabm::update_wind proc~update_data uvic_fabm::update_data proc~update_data->proc~update_wind proc~fabm_update uvic_fabm::fabm_update proc~fabm_update->proc~update_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/update_wind.html"},{"title":"link_mole_fraction_of_carbon_dioxide_in_air – FABM in UVic","text":"private  subroutine link_mole_fraction_of_carbon_dioxide_in_air() Arguments None Calls proc~~link_mole_fraction_of_carbon_dioxide_in_air~~CallsGraph proc~link_mole_fraction_of_carbon_dioxide_in_air uvic_fabm::link_mole_fraction_of_carbon_dioxide_in_air get_horizontal_variable_id get_horizontal_variable_id proc~link_mole_fraction_of_carbon_dioxide_in_air->get_horizontal_variable_id link_horizontal_data link_horizontal_data proc~link_mole_fraction_of_carbon_dioxide_in_air->link_horizontal_data variable_needs_values variable_needs_values proc~link_mole_fraction_of_carbon_dioxide_in_air->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~link_mole_fraction_of_carbon_dioxide_in_air~~CalledByGraph proc~link_mole_fraction_of_carbon_dioxide_in_air uvic_fabm::link_mole_fraction_of_carbon_dioxide_in_air proc~fabm_link_data uvic_fabm::fabm_link_data proc~fabm_link_data->proc~link_mole_fraction_of_carbon_dioxide_in_air Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/link_mole_fraction_of_carbon_dioxide_in_air.html"},{"title":"update_mole_fraction_of_carbon_dioxide_in_air – FABM in UVic","text":"private  subroutine update_mole_fraction_of_carbon_dioxide_in_air() calculate the ?????? in W/m&#94;2 Arguments None Calls proc~~update_mole_fraction_of_carbon_dioxide_in_air~~CallsGraph proc~update_mole_fraction_of_carbon_dioxide_in_air uvic_fabm::update_mole_fraction_of_carbon_dioxide_in_air variable_needs_values variable_needs_values proc~update_mole_fraction_of_carbon_dioxide_in_air->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~update_mole_fraction_of_carbon_dioxide_in_air~~CalledByGraph proc~update_mole_fraction_of_carbon_dioxide_in_air uvic_fabm::update_mole_fraction_of_carbon_dioxide_in_air proc~update_data uvic_fabm::update_data proc~update_data->proc~update_mole_fraction_of_carbon_dioxide_in_air proc~fabm_update uvic_fabm::fabm_update proc~fabm_update->proc~update_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/update_mole_fraction_of_carbon_dioxide_in_air.html"},{"title":"link_surface_downwelling_shortwave_flux – FABM in UVic","text":"private  subroutine link_surface_downwelling_shortwave_flux() Arguments None Calls proc~~link_surface_downwelling_shortwave_flux~~CallsGraph proc~link_surface_downwelling_shortwave_flux uvic_fabm::link_surface_downwelling_shortwave_flux get_horizontal_variable_id get_horizontal_variable_id proc~link_surface_downwelling_shortwave_flux->get_horizontal_variable_id link_horizontal_data link_horizontal_data proc~link_surface_downwelling_shortwave_flux->link_horizontal_data variable_needs_values variable_needs_values proc~link_surface_downwelling_shortwave_flux->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~link_surface_downwelling_shortwave_flux~~CalledByGraph proc~link_surface_downwelling_shortwave_flux uvic_fabm::link_surface_downwelling_shortwave_flux proc~fabm_link_data uvic_fabm::fabm_link_data proc~fabm_link_data->proc~link_surface_downwelling_shortwave_flux Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/link_surface_downwelling_shortwave_flux.html"},{"title":"update_surface_downwelling_shortwave_flux – FABM in UVic","text":"private  subroutine update_surface_downwelling_shortwave_flux() calculate the short wave flux in W/m&#94;2 Arguments None Calls proc~~update_surface_downwelling_shortwave_flux~~CallsGraph proc~update_surface_downwelling_shortwave_flux uvic_fabm::update_surface_downwelling_shortwave_flux variable_needs_values variable_needs_values proc~update_surface_downwelling_shortwave_flux->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~update_surface_downwelling_shortwave_flux~~CalledByGraph proc~update_surface_downwelling_shortwave_flux uvic_fabm::update_surface_downwelling_shortwave_flux proc~update_data uvic_fabm::update_data proc~update_data->proc~update_surface_downwelling_shortwave_flux proc~fabm_update uvic_fabm::fabm_update proc~fabm_update->proc~update_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/update_surface_downwelling_shortwave_flux.html"},{"title":"link_bottom_stress – FABM in UVic","text":"private  subroutine link_bottom_stress() get bottom stress FABM standard variable and if needed by FABM\nallocate memory Arguments None Calls proc~~link_bottom_stress~~CallsGraph proc~link_bottom_stress uvic_fabm::link_bottom_stress get_horizontal_variable_id get_horizontal_variable_id proc~link_bottom_stress->get_horizontal_variable_id link_horizontal_data link_horizontal_data proc~link_bottom_stress->link_horizontal_data variable_needs_values variable_needs_values proc~link_bottom_stress->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~link_bottom_stress~~CalledByGraph proc~link_bottom_stress uvic_fabm::link_bottom_stress proc~fabm_link_data uvic_fabm::fabm_link_data proc~fabm_link_data->proc~link_bottom_stress Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/link_bottom_stress.html"},{"title":"update_bottom_stress – FABM in UVic","text":"private  subroutine update_bottom_stress(joff) calculate the bottom stress in Pa Arguments Type Intent Optional Attributes Name integer, intent(in) :: joff offset row in global window Calls proc~~update_bottom_stress~~CallsGraph proc~update_bottom_stress uvic_fabm::update_bottom_stress variable_needs_values variable_needs_values proc~update_bottom_stress->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~update_bottom_stress~~CalledByGraph proc~update_bottom_stress uvic_fabm::update_bottom_stress proc~update_data uvic_fabm::update_data proc~update_data->proc~update_bottom_stress proc~fabm_update uvic_fabm::fabm_update proc~fabm_update->proc~update_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/update_bottom_stress.html"},{"title":"link_salinity – FABM in UVic","text":"private  subroutine link_salinity() get salinity FABM standard variable and if needed by FABM allocate\nmemory Arguments None Calls proc~~link_salinity~~CallsGraph proc~link_salinity uvic_fabm::link_salinity get_interior_variable_id get_interior_variable_id proc~link_salinity->get_interior_variable_id link_interior_data link_interior_data proc~link_salinity->link_interior_data variable_needs_values variable_needs_values proc~link_salinity->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~link_salinity~~CalledByGraph proc~link_salinity uvic_fabm::link_salinity proc~fabm_link_data uvic_fabm::fabm_link_data proc~fabm_link_data->proc~link_salinity Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/link_salinity.html"},{"title":"update_salinity – FABM in UVic","text":"private  subroutine update_salinity() calculate salinity in PSU according to Arguments None Calls proc~~update_salinity~~CallsGraph proc~update_salinity uvic_fabm::update_salinity variable_needs_values variable_needs_values proc~update_salinity->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~update_salinity~~CalledByGraph proc~update_salinity uvic_fabm::update_salinity proc~update_data uvic_fabm::update_data proc~update_data->proc~update_salinity proc~fabm_update uvic_fabm::fabm_update proc~fabm_update->proc~update_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/update_salinity.html"},{"title":"link_density – FABM in UVic","text":"private  subroutine link_density() get density FABM standard variable and if needed by FABM allocate\nmemory Arguments None Calls proc~~link_density~~CallsGraph proc~link_density uvic_fabm::link_density get_interior_variable_id get_interior_variable_id proc~link_density->get_interior_variable_id link_interior_data link_interior_data proc~link_density->link_interior_data variable_needs_values variable_needs_values proc~link_density->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~link_density~~CalledByGraph proc~link_density uvic_fabm::link_density proc~fabm_link_data uvic_fabm::fabm_link_data proc~fabm_link_data->proc~link_density Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/link_density.html"},{"title":"update_density – FABM in UVic","text":"private  subroutine update_density() calculate density in kg/m³ according to with . MUST match rho0 from UVic_ESCM.F90 Note loadmw.F: l 154 imt=102, km=19, jsmw=2, jmw=jmt --- jemw=jmw-1 declared: rho(imt,km,jsmw:jmw) calculated rho(1:102,2:102) rho Note KB check depth dependent reference density Arguments None Calls proc~~update_density~~CallsGraph proc~update_density uvic_fabm::update_density variable_needs_values variable_needs_values proc~update_density->variable_needs_values Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~update_density~~CalledByGraph proc~update_density uvic_fabm::update_density proc~update_data uvic_fabm::update_data proc~update_data->proc~update_density proc~fabm_update uvic_fabm::fabm_update proc~fabm_update->proc~update_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/update_density.html"},{"title":"uvic_common_blocks – FABM in UVic","text":"Note We need this F77 file to get the information of array sizes and\na number of static allocated MOM2 variables. The way the UVic include files are formatted does not\nallow to be included in F90 free format source code files. Still to be solved is the issue of getting the variables in mw.h to\ndouble precission - for now updates/fabm/source/mom/mw.h has a\nkind=8 on all real arguments Used by module~~uvic_common_blocks~~UsedByGraph module~uvic_common_blocks uvic_common_blocks module~uvic_fabm uvic_fabm module~uvic_fabm->module~uvic_common_blocks program~uvic_escm_fabm UVic_ESCM_FABM program~uvic_escm_fabm->module~uvic_common_blocks program~uvic_escm_fabm->module~uvic_fabm Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Common Blocks uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /coord/ Type Attributes Name Initial real :: xt (imt) real :: yt (jmt) real :: xu (imt) real :: yu (jmt) real :: zw (km) real :: zt (km) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /coord/ Type Attributes Name Initial real :: dxtdeg (imt) real :: dytdeg (jmt) real :: dzt (km) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /coord/ Type Attributes Name Initial real :: dxudeg (imt) real :: dyudeg (jmt) real :: dzw (0:km) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: itaux integer :: itauy integer :: iws integer :: iaca integer :: isca integer :: ihflx integer :: isflx integer :: isst uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: isss integer :: iwa integer :: iro integer :: iwxq integer :: iwyq integer :: iwxt integer :: iwyt integer :: iwxc integer :: iwyc uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: ipsw integer :: isu integer :: isv integer :: igu integer :: igv integer :: issdic integer :: idicflx integer :: issalk uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: ialkflx integer :: isso2 integer :: io2flx integer :: isspo4 integer :: ipo4flx integer :: issphyt uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: iphytflx integer :: isszoop integer :: izoopflx integer :: issdetr integer :: idetrflx uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: issno3 integer :: ino3flx integer :: issdiaz integer :: idiazflx integer :: issc14 uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: ic14flx integer :: isscfc11 integer :: icfc11flx integer :: isscfc12 integer :: icfc12flx uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: iat integer :: irh integer :: ipr integer :: ips integer :: iaws integer :: iswr integer :: ilwr integer :: isens integer :: ievap uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: idtr integer :: inpp integer :: isr integer :: iburn integer :: ibtemp integer :: ibsalt integer :: ibdic uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: ibdicfx integer :: ibalk integer :: ibalkfx integer :: ibo2 integer :: ircal integer :: irorg common /csbc_c/ Type Attributes Name Initial integer :: mapsbc (numsbc) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_r/ Type Attributes Name Initial real :: sbc (imt,jmt,numsbc) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_r/ Type Attributes Name Initial real :: gaost (nt) real :: socn uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: ntspas integer :: ntspls integer :: ntspos integer :: nats integer :: nots integer :: nismacc uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: nsedacc common /csbc_l/ Type Attributes Name Initial logical :: addflxa logical :: addflxo uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_r/ Type Attributes Name Initial real :: dtatm real :: dtism real :: dtismyr real :: dtlnd real :: dtocn real :: dtsed uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_r/ Type Attributes Name Initial real :: dtsedyr real :: atatm real :: atism real :: atlnd real :: atocn real :: atsed uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_r/ Type Attributes Name Initial real :: dampts (nt) real :: dampdz (nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: land_map (imt,jmt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_i/ Type Attributes Name Initial integer :: ntlbc uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_r/ Type Attributes Name Initial real :: dtoih real :: dtoic uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /csbc_r/ Type Attributes Name Initial real :: avgpertavg real :: avgtimtavg real :: avgpertsi real :: avgtimtsi uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_i/ Type Attributes Name Initial integer :: taum1 integer :: tau integer :: taup1 uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: u (imt,km,jmw,2,-1:1) real :: t (imt,km,jmw,nt,-1:1) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: src (imt,km,jsmw:jemw,nsrc) uvic_common_blocks (module) \">\n           common /mw_c/ Type Attributes Name Initial integer :: mapt (nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_i/ Type Attributes Name Initial integer :: itemp integer :: isalt integer :: idic integer :: ic14 integer :: icfc11 integer :: icfc12 integer :: ialk uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_i/ Type Attributes Name Initial integer :: ipo4 integer :: iphyt integer :: izoop integer :: idetr integer :: io2 integer :: ino3 integer :: idiaz uvic_common_blocks (module) \">\n           common /mw_c/ Type Attributes Name Initial integer :: mapst (nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_i/ Type Attributes Name Initial integer :: itrc (nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_i/ Type Attributes Name Initial integer :: istemp integer :: issalt integer :: isdic integer :: isc14 integer :: isalk integer :: ispo4 integer :: isphyt uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_i/ Type Attributes Name Initial integer :: iszoop integer :: isdetr integer :: iso2 integer :: isno3 integer :: isdiaz uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_vet (imt,km,jsmw:jmw) real :: adv_vnt (imt,km,1:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_veu (imt,km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_vnu (imt,km,1:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_vbt (imt,0:km,jsmw:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_vbu (imt,0:km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: rho (imt,km,jsmw:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: grad_p (imt,km,jsmw:jemw,2) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: tmask (imt,km,1:jmw) real :: umask (imt,km,1:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_fe (imt,km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_fn (imt,km,1:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: adv_fb (imt,0:km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: diff_fe (imt,km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: diff_fn (imt,km,1:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: diff_fb (imt,0:km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: diff_fbiso (imt,0:km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: source (imt,km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: zzi (imt,km,jsmw:jemw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: cstdxtr (imt,jsmw:jmw) real :: cstdxur (imt,jsmw:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: cstdxt2r (imt,jsmw:jmw) real :: ah_cstdxur (imt,jsmw:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: csudxur (imt,jsmw:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: csudxtr (imt,jsmw:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: csudxu2r (imt,jsmw:jmw) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: am_csudxtr (imt,km,jsmw:jmw) common /advec_r/ Type Attributes Name Initial real :: advmet (jmt,2) common /coriol_r/ Type Attributes Name Initial real :: cori (imt,jmt,2) common /extwrk_r/ Type Attributes Name Initial real :: cf (imt,jmt,-1:1,-1:1) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: smf (imt,1:jmw,2) real :: bmf (imt,1:jmw,2) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: stf (imt,1:jmw,nt) real :: btf (imt,1:jmw,nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: anti_fe (imt,km,jsmw:jmw,nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: anti_fn (imt,km,1:jmw-1+jmw/jmt,nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: anti_fb (imt,0:km,jsmw:jmw,nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: R_plusY (imt,km,1:jmw-1+jmw/jmt,nt) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) uvic_common_blocks (module) \">\n           common /mw_r/ Type Attributes Name Initial real :: R_minusY (imt,km,1:jmw-1+jmw/jmt,nt) common /levind/ Type Attributes Name Initial integer :: kmt (imt,jmt) integer :: kmu (imt,jmt) Variables Type Visibility Attributes Name Initial integer, public, parameter :: imt = 102 integer, public, parameter :: jmt = 102 integer, public, parameter :: km = 19 integer, public, parameter :: nt = 2 + 7 +1 +1 +1 +1 +4 +2 integer, public, parameter :: nsrc = 0 +1 +1 +1 +1 +4 +2 integer, public, parameter :: kpzd = km integer, public, parameter :: nat = 2 integer, public, parameter :: jmz = jmt integer, public, parameter :: jmzm1 = jmz-1 integer, public, parameter :: mnisle = 50 integer, public, parameter :: maxipp = 5000 integer, public, parameter :: jmw = jmt integer, public, parameter :: jsmw = 2 integer, public, parameter :: jemw = jmw-1 integer, public, parameter :: POINTS = 14300 integer, public, parameter :: STEPSM = 24 integer, public, parameter :: klmax = 0 integer, public, parameter :: NNVG = 4 integer, public, parameter :: NPFT = 5 integer, public, parameter :: NTYPE = 6 integer, public, parameter :: SOIL = 6 integer, public, parameter :: NSLOPE = 100 integer, public, parameter :: NGND = 14 real(kind=8), public :: xt real(kind=8), public :: yt real(kind=8), public :: xu real(kind=8), public :: yu real(kind=8), public :: zw real(kind=8), public :: zt real(kind=8), public :: dxtdeg real(kind=8), public :: dytdeg real(kind=8), public :: dzt real(kind=8), public :: dxudeg real(kind=8), public :: dyudeg real(kind=8), public :: dzw integer, public, parameter :: numsbc = 14 + 4 + 2 + 2 + 2 + 2 + 2 + 2 + 10 + 3 + 7 + 1 + 1 character(len=20), public :: mapsbc real, public :: sbc real, public :: gaost real, public :: dampts real, public :: dampdz real, public :: subflux real, public :: subz integer, public :: land_map real(kind=8), public :: u real(kind=8), public :: t real(kind=8), public :: src character(len=30), public :: mapt character(len=10), public :: mapst integer, public :: itrc real(kind=8), public :: adv_vet real(kind=8), public :: adv_vnt real(kind=8), public :: adv_veu real(kind=8), public :: adv_vnu real(kind=8), public :: adv_vbt real(kind=8), public :: adv_vbu real(kind=8), public :: rho real(kind=8), public :: rhotaum1 real(kind=8), public :: rhotaup1 real(kind=8), public :: rhotilde real(kind=8), public :: grad_p real(kind=8), public :: tmask real(kind=8), public :: umask real(kind=8), public :: adv_fe real(kind=8), public :: adv_fn real(kind=8), public :: adv_fb real(kind=8), public :: diff_fe real(kind=8), public :: diff_fn real(kind=8), public :: diff_fb real(kind=8), public :: diff_fbiso real(kind=8), public :: source real(kind=8), public :: zzi real(kind=8), public :: cstdxtr real(kind=8), public :: cstdxur real(kind=8), public :: cstdxt2r real(kind=8), public :: ah_cstdxur real(kind=8), public :: csudxur real(kind=8), public :: csudxtr real(kind=8), public :: csudxu2r real(kind=8), public :: am_csudxtr real(kind=8), public :: advmet real(kind=8), public :: cori real(kind=8), public :: cf real(kind=8), public :: smf real(kind=8), public :: bmf real(kind=8), public :: stf real(kind=8), public :: btf real(kind=8), public :: anti_fe real(kind=8), public :: anti_fn real(kind=8), public :: anti_fb real(kind=8), public :: R_plusY real(kind=8), public :: R_minusY integer, public :: kmt integer, public :: kmu","tags":"","loc":"module/uvic_common_blocks.html"},{"title":"uvic_fabm – FABM in UVic","text":"Some native UVic_ESCM variables will have to be converted to be compatible with FABM.\nThis can either be because of different dimensionality or different units.\nThis is done by creating module level private variables that will be calculated/updated\nbased on the original UVic_ECSM variables. Some will only need to be calculated once - like\nlayer heights - and some will have to be updated every time step - like density. Warning This module is still under development.\nAPI and functioning might change without notice. History A list of important UVic (MOM2) variables used by FABM: - all tracers [source/mom/mw.h] : tracers with sources [source/mom/tracer.f] surftace boundary conditions [source/common/csbc.h] :  density [source/mom/mw.h] with [commom/size.h] number of tracers [commom/size.h] [commom/size.h] : number of tracers with source terms [common/csbc.h] : total number of surface boundary conditions -\n  list in [common/csbc.h] set in [common/UVic_ESCM.F]. Updating FABM is done i the tracer subroutine with Note The FABM calculation domain in UVic reference is Is it best to allocate arrays correspondingly or do the mapping\nin the do-loops? Note Dimension of z, dz and pressure in a z-coordinate model?\nOption to be 1D? Uses fabm_types fabm_debug fabm uvic_common_blocks module~~uvic_fabm~~UsesGraph module~uvic_fabm uvic_fabm fabm fabm module~uvic_fabm->fabm fabm_debug fabm_debug module~uvic_fabm->fabm_debug fabm_types fabm_types module~uvic_fabm->fabm_types module~uvic_common_blocks uvic_common_blocks module~uvic_fabm->module~uvic_common_blocks Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~uvic_fabm~~UsedByGraph module~uvic_fabm uvic_fabm program~uvic_escm_fabm UVic_ESCM_FABM program~uvic_escm_fabm->module~uvic_fabm Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial class(type_fabm_model), private, pointer :: model This variable will contain all FABM configuration and\ngive access to FABM routines id_alkalinity_expressed_as_mole_equivalent\nid_attenuation_coefficient_of_photosynthetic_radiative_flux\nid_attenuation_coefficient_of_shortwave_flux real(kind=rke), private, allocatable, target :: dz (:,:,:) type(type_fabm_interior_variable_id), private :: id_density real(kind=rke), private, allocatable, target :: rho_fabm (:,:,:) real(kind=rke), private, allocatable, target :: depth (:,:,:) id_downwelling_photosynthetic_radiative_flux\nid_downwelling_shortwave_flux\nid_fractional_saturation_of_oxygen\nid_mass_concentration_of_suspended_matter\nid_mole_concentration_of_ammonium\nid_mole_concentration_of_carbonate_expressed_as_carbon\nid_mole_concentration_of_dissolved_inorganic_carbon\nid_mole_concentration_of_dissolved_iron\nid_mole_concentration_of_nitrate\nid_mole_concentration_of_phosphate\nid_mole_concentration_of_silicate\nid_net_rate_of_absorption_of_shortwave_energy_in_layer\nid_ph_reported_on_total_scale type(type_fabm_interior_variable_id), private :: id_practical_salinity real(kind=rke), private, allocatable, target :: salt (:,:,:) type(type_fabm_interior_variable_id), private :: id_pressure real(kind=rke), private, allocatable, target :: pressure (:,:,:) id_secchi_depth id_cloud_area_fraction\nid_ice_area_fraction type(type_fabm_horizontal_variable_id), private :: id_mole_fraction_of_carbon_dioxide_in_air real(kind=rke), private, allocatable, target :: mole_fraction_of_carbon_dioxide_in_air (:,:) id_surface_air_pressure\nid_surface_albedo\nid_surface_downwelling_photosynthetic_radiative_flux\nid_surface_downwelling_photosynthetic_radiative_flux_in_air type(type_fabm_horizontal_variable_id), private :: id_surface_downwelling_shortwave_flux real(kind=rke), private, allocatable, target :: surface_downwelling_shortwave_flux (:,:) id_surface_downwelling_shortwave_flux_in_air\nid_surface_drag_coefficient_in_air\nid_surface_specific_humidity\nid_surface_temperature type(type_fabm_horizontal_variable_id), private :: id_windspeed real(kind=rke), private, allocatable, target :: windspeed (:,:) id_bottom_depth\nid_bottom_depth_below_geoid\nid_bottom_roughness_length type(type_fabm_horizontal_variable_id), private :: id_bottom_stress real(kind=rke), private, allocatable, target :: bottom_stress (:,:) id_number_of_days_since_start_of_the_year id_total_carbon\nid_total_iron\nid_total_nitrogen\nid_total_phosphorus\nid_total_silicate real(kind=rke), private :: surface_flux (2:imt-1,2:jmt-1,nt) surface fluxes real(kind=rke), private :: surface_sms (2:imt-1,2:jmt-1,nt) surface source-sink terms real(kind=rke), private :: bottom_flux (2:imt-1,2:jmt-1,nt) bottom fluxes real(kind=rke), private :: bottom_sms (2:imt-1,2:jmt-1,nt) bottom source-sink terms real(kind=rke), private :: w (2:imt-1,km,2:jmt-1,nt) vertical velocity in m/s Subroutines public  subroutine fabm_configure (dt) read fabm.yaml and call FABM configuration subroutines Read more… Arguments Type Intent Optional Attributes Name real(kind=rke), intent(in) :: dt bio-geochemical time step as set by MOM2 [s] public  subroutine fabm_link_data () link all FABM configured external dependencies - and call\nmodel%start() to assure proper configuration Arguments None public  subroutine fabm_list () lists all FABM configured variables Arguments None public  subroutine fabm_update (joff, js, je, is, ie) update the environment and calculate the source/sink terms\ncall with the same argument list as mom() calls tracer() i.e.\nthe specification on the active UVic window - typically the\nfull domain on modern hardware Arguments Type Intent Optional Attributes Name integer, intent(in) :: joff offset row in global window integer, intent(in) :: js start row integer, intent(in) :: je end row integer, intent(in) :: is start column integer, intent(in) :: ie end column public  subroutine fabm_clean () de-allocate all allocated arrays Arguments None private  subroutine update_data (joff) Arguments Type Intent Optional Attributes Name integer, intent(in) :: joff offset row in global window\nupdate all time varying FABM configured external dependencies\nby calling individual update routines - tests done in routines private  subroutine link_grid () Allocate and link grid related FABM standard variables that\nare being transformed from UVic native variables [cm -> m]. Arguments None private  subroutine link_wind () get wind speed FABM standard variable and if needed by FABM\nallocate memory Arguments None private  subroutine update_wind () calculate wind speed in m/s according to Arguments None private  subroutine link_mole_fraction_of_carbon_dioxide_in_air () Arguments None private  subroutine update_mole_fraction_of_carbon_dioxide_in_air () calculate the ?????? in W/m&#94;2 Arguments None private  subroutine link_surface_downwelling_shortwave_flux () Arguments None private  subroutine update_surface_downwelling_shortwave_flux () calculate the short wave flux in W/m&#94;2 Arguments None private  subroutine link_bottom_stress () get bottom stress FABM standard variable and if needed by FABM\nallocate memory Arguments None private  subroutine update_bottom_stress (joff) calculate the bottom stress in Pa Arguments Type Intent Optional Attributes Name integer, intent(in) :: joff offset row in global window private  subroutine link_salinity () get salinity FABM standard variable and if needed by FABM allocate\nmemory Arguments None private  subroutine update_salinity () calculate salinity in PSU according to Arguments None private  subroutine link_density () get density FABM standard variable and if needed by FABM allocate\nmemory Arguments None private  subroutine update_density () calculate density in kg/m³ according to with . MUST match rho0 from UVic_ESCM.F90 Read more… Arguments None","tags":"","loc":"module/uvic_fabm.html"},{"title":"UVic_ESCM_FABM – FABM in UVic","text":"Uses uvic_fabm uvic_common_blocks program~~uvic_escm_fabm~~UsesGraph program~uvic_escm_fabm UVic_ESCM_FABM module~uvic_common_blocks uvic_common_blocks program~uvic_escm_fabm->module~uvic_common_blocks module~uvic_fabm uvic_fabm program~uvic_escm_fabm->module~uvic_fabm module~uvic_fabm->module~uvic_common_blocks fabm fabm module~uvic_fabm->fabm fabm_debug fabm_debug module~uvic_fabm->fabm_debug fabm_types fabm_types module~uvic_fabm->fabm_types Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This program is used to assure that the sizes of arrays\nspecified in size.h and the size deducted from fabm.yaml\nare in aggreement. Note The way the include files are formatted does not\nallow to be included in F90 free format source code files.\nStill to be solved is the issue of getting the variables in mw.h to\ndouble precission - for now mw.h in the base UVic source code folder\nhas a kind=8 on all real arguments Calls program~~uvic_escm_fabm~~CallsGraph program~uvic_escm_fabm UVic_ESCM_FABM configure_fabm configure_fabm program~uvic_escm_fabm->configure_fabm list_fabm list_fabm program~uvic_escm_fabm->list_fabm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"program/uvic_escm_fabm.html"},{"title":"common_blocks.F – FABM in UVic","text":"Files dependent on this one sourcefile~~common_blocks.f~~AfferentGraph sourcefile~common_blocks.f common_blocks.F sourcefile~uvic_escm_fabm.f90 uvic_escm_fabm.F90 sourcefile~uvic_escm_fabm.f90->sourcefile~common_blocks.f sourcefile~uvic_fabm.f90 uvic_fabm.F90 sourcefile~uvic_escm_fabm.f90->sourcefile~uvic_fabm.f90 sourcefile~uvic_fabm.f90->sourcefile~common_blocks.f Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code c Copyright (C) 2024 Bolding & Bruggeman c> @note c> We need this F77 file to get the information of array sizes and c> a number of static allocated MOM2 variables. c> c> The way the UVic include files are formatted does not c> allow to be included in F90 free format source code files. c> c> Still to be solved is the issue of getting the variables in mw.h to c> double precission - for now updates/fabm/source/mom/mw.h has a c! kind=8 on all real arguments c> @endnote module uvic_common_blocks include \"size.h\" include \"coord.h\" include \"csbc.h\" include \"mw.h\" include \"levind.h\" end module uvic_common_blocks","tags":"","loc":"sourcefile/common_blocks.f.html"},{"title":"uvic_escm_fabm.F90 – FABM in UVic","text":"This file depends on sourcefile~~uvic_escm_fabm.f90~~EfferentGraph sourcefile~uvic_escm_fabm.f90 uvic_escm_fabm.F90 sourcefile~common_blocks.f common_blocks.F sourcefile~uvic_escm_fabm.f90->sourcefile~common_blocks.f sourcefile~uvic_fabm.f90 uvic_fabm.F90 sourcefile~uvic_escm_fabm.f90->sourcefile~uvic_fabm.f90 sourcefile~uvic_fabm.f90->sourcefile~common_blocks.f Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code ! Copyright (C) 2024 Bolding & Bruggeman !> This program is used to assure that the sizes of arrays !> specified in size.h and the size deducted from fabm.yaml !> are in aggreement. !> !> @note The way the include files are formatted does not !> allow to be included in F90 free format source code files. !> Still to be solved is the issue of getting the variables in mw.h to !> double precission - for now mw.h in the base UVic source code folder !> has a kind=8 on all real arguments @endnote program UVic_ESCM_FABM use uvic_common_blocks use uvic_fabm , only : fabm_configure , fabm_list implicit none #if 0 print * , size ( u ) print * , shape ( u ) print * , size ( t ) print * , shape ( t ) #endif ! from UVic_ESCM.f: tracer_init itemp = 1 isalt = 2 print * , '== UNIVERSITY OF VICTORIA EARTH SYSTEM CLIMATE MODEL with FABM ==' print * , '== Configuration from: ' , _ DIR_UVIC_CODE_ ! tracer_init call configure_fabm () call list_fabm () end","tags":"","loc":"sourcefile/uvic_escm_fabm.f90.html"},{"title":"uvic_fabm.F90 – FABM in UVic","text":"This file depends on sourcefile~~uvic_fabm.f90~~EfferentGraph sourcefile~uvic_fabm.f90 uvic_fabm.F90 sourcefile~common_blocks.f common_blocks.F sourcefile~uvic_fabm.f90->sourcefile~common_blocks.f Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~uvic_fabm.f90~~AfferentGraph sourcefile~uvic_fabm.f90 uvic_fabm.F90 sourcefile~uvic_escm_fabm.f90 uvic_escm_fabm.F90 sourcefile~uvic_escm_fabm.f90->sourcefile~uvic_fabm.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code ! Copyright (C) 2024 Bolding & Bruggeman !> Some native UVic_ESCM variables will have to be converted to be compatible with FABM. !> This can either be because of different dimensionality or different units. !> This is done by creating module level private variables that will be calculated/updated !> based on the original UVic_ECSM variables. Some will only need to be calculated once - like !> layer heights - and some will have to be updated every time step - like density. !> @warning !> This module is still under development. !> API and functioning might change without notice. !> @endwarning !> !> @history !> A list of important UVic (MOM2) variables used by FABM: !> !> - t(imt,km,jmt,nt,-1:1) - all tracers [source/mom/mw.h] !> - src(imt,km,jsmw:jemw,nsrc): tracers with sources [source/mom/tracer.f] !> - sbc(imt,jmt,numsbc) surftace boundary conditions [source/common/csbc.h] !> - rho(imt,km,jsmw:jmw):  density [source/mom/mw.h] !> !> with !> !> - (imt,km,jmt) = (102,19,102) [commom/size.h] !> - nt = 2+?? number of tracers [commom/size.h] !> - jsmw:jemw = (2, jmw=jmt) or (2, jmw=(3,4,5) [commom/size.h] !> - nsrc: number of tracers with source terms [common/csbc.h] !> - numsbc: total number of surface boundary conditions - !>   list in [common/csbc.h] set in [common/UVic_ESCM.F]. !> !> Updating FABM is done i the tracer subroutine !> !> call tracer (joff, jstrac, jetrac, is, ie) !> with !> !> - (joff, jstrac, jetrac, is, ie) = (0,2,101,2,101) !> !> @endhistory !> !> @note !> The FABM calculation domain in UVic reference is  (2:imt-1,km,2:jmt-1)  !> !> Is it best to allocate arrays correspondingly or do the mapping !> in the do-loops? !> @endnote !> !> @note !> Dimension of z, dz and pressure in a z-coordinate model? !> Option to be 1D? !> !> @endnote module uvic_fabm #ifdef O_fabm use uvic_common_blocks use fabm use fabm_types #define DEBUG #ifdef DEBUG use fabm_debug #endif IMPLICIT NONE private class ( type_fabm_model ), pointer :: model !! This variable will contain all FABM configuration and !! give access to FABM routines #if 1 ! The following is a list of all FABM standard variables - the definitions can be updated ! during the implementation. The order of the variables is mainained from: ! https://github.com/fabm-model/fabm/wiki/List-of-standard-variables ! For mandatory variables - e.g. cell thinkness it is not necessary to obtain an id. ! Interior variables !! id_alkalinity_expressed_as_mole_equivalent !! id_attenuation_coefficient_of_photosynthetic_radiative_flux !! id_attenuation_coefficient_of_shortwave_flux !type (type_fabm_interior_variable_id) :: id_cell_thickness real ( rke ), allocatable , target :: dz (:,:,:) type ( type_fabm_interior_variable_id ) :: id_density real ( rke ), allocatable , target :: rho_fabm (:,:,:) !type (type_fabm_interior_variable_id) :: id_depth real ( rke ), allocatable , target :: depth (:,:,:) !! id_downwelling_photosynthetic_radiative_flux !! id_downwelling_shortwave_flux !! id_fractional_saturation_of_oxygen !! id_mass_concentration_of_suspended_matter !! id_mole_concentration_of_ammonium !! id_mole_concentration_of_carbonate_expressed_as_carbon !! id_mole_concentration_of_dissolved_inorganic_carbon !! id_mole_concentration_of_dissolved_iron !! id_mole_concentration_of_nitrate !! id_mole_concentration_of_phosphate !! id_mole_concentration_of_silicate !! id_net_rate_of_absorption_of_shortwave_energy_in_layer !! id_ph_reported_on_total_scale type ( type_fabm_interior_variable_id ) :: id_practical_salinity real ( rke ), allocatable , target :: salt (:,:,:) type ( type_fabm_interior_variable_id ) :: id_pressure real ( rke ), allocatable , target :: pressure (:,:,:) !! id_secchi_depth !type (type_fabm_interior_variable_id) :: id_temperature ! Surface variables !! id_cloud_area_fraction !! id_ice_area_fraction type ( type_fabm_horizontal_variable_id ) :: id_mole_fraction_of_carbon_dioxide_in_air real ( rke ), allocatable , target :: mole_fraction_of_carbon_dioxide_in_air (:,:) !! id_surface_air_pressure !! id_surface_albedo !! id_surface_downwelling_photosynthetic_radiative_flux !! id_surface_downwelling_photosynthetic_radiative_flux_in_air type ( type_fabm_horizontal_variable_id ) :: id_surface_downwelling_shortwave_flux real ( rke ), allocatable , target :: surface_downwelling_shortwave_flux (:,:) !! id_surface_downwelling_shortwave_flux_in_air !! id_surface_drag_coefficient_in_air !! id_surface_specific_humidity !! id_surface_temperature type ( type_fabm_horizontal_variable_id ) :: id_windspeed real ( rke ), allocatable , target :: windspeed (:,:) ! Bottom variables !! id_bottom_depth !! id_bottom_depth_below_geoid !! id_bottom_roughness_length type ( type_fabm_horizontal_variable_id ) :: id_bottom_stress real ( rke ), allocatable , target :: bottom_stress (:,:) ! Global variables !! id_number_of_days_since_start_of_the_year ! Universal variables !! id_total_carbon !! id_total_iron !! id_total_nitrogen !! id_total_phosphorus !! id_total_silicate ! horizontal FABM ids ! interior FABM variables - calculated from UVic_ESCM variables ! horizontal FABM variables #endif ! public available routines public fabm_configure , fabm_link_data , fabm_update , fabm_list , fabm_clean ! module level variables - static or allocatable? Same goes with e.g. windspeed and rho_fabm #define _DOMAIN_  2:imt-1,km,2:jmt-1 #define _I_  2:imt-1 #define _J_  2:jmt-1 #define _K_  km real ( rke ) :: surface_flux ( _ I_ , _ J_ , nt ) !! surface fluxes real ( rke ) :: surface_sms ( _ I_ , _ J_ , nt ) !! surface source-sink terms real ( rke ) :: bottom_flux ( _ I_ , _ J_ , nt ) !! bottom fluxes real ( rke ) :: bottom_sms ( _ I_ , _ J_ , nt ) !! bottom source-sink terms !real(rke) :: w(imt,km,jsmw:jemw,nt) real ( rke ) :: w ( _ I_ , _ K_ , _ J_ , nt ) !! vertical velocity in m/s !----------------------------------------------------------------------- contains !----------------------------------------------------------------------- subroutine fabm_configure ( dt ) !! read fabm.yaml and call FABM configuration subroutines real ( rke ), intent ( in ) :: dt !! bio-geochemical time step as set by MOM2 [s] print * , '== Initializing FABM component with nt=' , nt model => fabm_create_model ( 'fabm.yaml' ) !parameter (jsmw=2, jemw=jmw-1) - parameter (jmw=jmt) ! joff,js,je,is,ie 0, 2, 101, 2, 101 - fabm_update() print * , imt , jmt , jmw print * , 'zt: ' , shape ( zt ) print * , 't: ' , shape ( t ) print * , 'sbc: ' , shape ( sbc ) print * , 'src: ' , shape ( src ) ! imt,km,jsmw:jemw,nsrc print * , 'source: ' , shape ( source ) ! imt,km,jsmw:jemw print * , 'rho: ' , shape ( rho ) !stop 112 if ( nt - 2 . ne . size ( model % interior_state_variables )) then print * , nt - 2 , size ( model % interior_state_variables ) !KB      stop 'aa' end if !   call model%set_domain(imt,km,jmt,dt) call model % set_domain ( imt - 2 , km , jmt - 2 , dt ) ! jmt or jmw? call model % set_domain_start ( 2 , 1 , 2 ) call model % set_domain_stop ( imt - 1 , km , jmt - 1 ) !   call model%set_mask(tmask(2:jmt-1,:,2:jmt-1),tmask(2:jmt-1,1,2:jmt-1)) call model % set_mask ( tmask ( _ I_ ,:, _ J_ ), tmask ( _ I_ , 1 , _ J_ )) !> @note !! seems tmask is not initialised until called in mom() - !! i.e. after initialization - so all values are 0 here !! @endnote !KBprint*, tmask(53,:,53) call model % set_bottom_index ( kmt ( _ I_ , _ J_ )) end subroutine fabm_configure !----------------------------------------------------------------------- subroutine fabm_link_data () !! link all FABM configured external dependencies - and call !! model%start() to assure proper configuration integer :: n ! link to time in-dependent data that do require transformation call link_grid () ! link to time dependent data that do NOT require transformation call model % link_interior_data ( fabm_standard_variables % temperature , t ( _ I_ ,:, _ J_ , itemp , 0 )) ! link to time dependent data that do require transformation ! initialize and update time changing environmental variables #if 1 call link_wind () call link_mole_fraction_of_carbon_dioxide_in_air () call link_surface_downwelling_shortwave_flux () call link_bottom_stress () call link_salinity () call link_density () #endif ! link to FABM's interior state variables do n = 1 , size ( model % interior_state_variables ) call model % link_interior_state_data ( n , t ( _ I_ ,:, _ J_ , 2 + n , 0 )) mapt ( 2 + n ) = trim ( model % interior_state_variables ( n )% name ) !KBmapst(2+n) = 's'//trim(mapt(2+n)) end do call model % start () end subroutine fabm_link_data !----------------------------------------------------------------------- subroutine fabm_list () !! lists all FABM configured variables integer :: n print * , 'FABM interior state variables:' do n = 1 , size ( model % interior_state_variables ) print * , n , & trim ( model % interior_state_variables ( n )% name ), '  ' , & trim ( model % interior_state_variables ( n )% units ), '  ' ,& trim ( model % interior_state_variables ( n )% long_name ) end do print * , 'FABM surface-bound state variables:' do n = 1 , size ( model % surface_state_variables ) print * , n , & trim ( model % surface_state_variables ( n )% name ), '  ' , & trim ( model % surface_state_variables ( n )% units ), '  ' , & trim ( model % surface_state_variables ( n )% long_name ) end do print * , 'FABM bottom-bound state variables:' do n = 1 , size ( model % bottom_state_variables ) print * , n , & trim ( model % bottom_state_variables ( n )% name ), '  ' , & trim ( model % bottom_state_variables ( n )% units ), '  ' , & trim ( model % bottom_state_variables ( n )% long_name ) end do #if 0 print * , 'FABM diagnostic variables defined on the full model domain:' do n = 1 , size ( model % interior_diagnostic_variables ) print * , n , & trim ( model % interior_diagnostic_variables ( n )% name ), '  ' , & trim ( model % interior_diagnostic_variables ( n )% units ), '  ' , & trim ( model % interior_diagnostic_variables ( n )% long_name ) end do print * , 'FABM diagnostic variables defined on a horizontal slice of the model domain:' do n = 1 , size ( model % horizontal_diagnostic_variables ) print * , n , & trim ( model % horizontal_diagnostic_variables ( n )% name ), '  ' , & trim ( model % horizontal_diagnostic_variables ( n )% units ), '  ' , & trim ( model % horizontal_diagnostic_variables ( n )% long_name ) end do #endif end subroutine fabm_list !----------------------------------------------------------------------- subroutine fabm_update ( joff , js , je , is , ie ) !! update the environment and calculate the source/sink terms !! call with the same argument list as mom() calls tracer() i.e. !! the specification on the active UVic window - typically the !! full domain on modern hardware integer , intent ( in ) :: joff !! offset row in global window integer , intent ( in ) :: js !! start row integer , intent ( in ) :: je !! end row integer , intent ( in ) :: is !! start column integer , intent ( in ) :: ie !! end column integer :: i , j , k , n ! local loop counters print * , 'fabm_update' , joff , js , je , is , ie ! t(:,:,:,var,0) is updated in loadmw() in mom() call update_data ( joff ) #if 0 print * , 'wind ' , sbc ( 53 , 53 , iws ) / 10 0._rke print * , 'salt ' , 3 5. + 1000 * t ( 53 ,:, 53 , isalt , 0 ) stop 'egon' #endif !KB   call model%prepare_inputs(t=real(imal,rk)) call model % prepare_inputs () stop 111 ! here the surface is updated surface_flux = 0._rke surface_sms = 0._rke #if 0 do j = js , je call model % get_surface_sources ( is , ie , j , & surface_flux ( is : ie , j ,:), surface_sms ( is : ie , j ,:)) end do #endif ! here the pelagic is updated do j = js , je do k = 1 , km call model % get_interior_sources ( is , ie , k , j , src ( is : ie , k , j ,:)) end do end do ! here the bottom is updated bottom_flux = 0._rke bottom_sms = 0._rke #if 0 do j = js , je call model % get_bottom_sources ( is , ie , j , & bottom_flux ( is : ie , j ,:), bottom_sms ( is : ie , j ,:)) end do #endif print * , shape ( bottom_flux ) print * , shape ( bottom_sms ) print * , shape ( src ) stop 110 #if 1 ! fold the surface and bottom flux terms - src keeps track on ! which variables actually have sources - itrc(n) and the size ! of src reflects this - tracer.F90 line 1122 do n = 1 , nt do j = js , je do i = is , ie if ( kmt ( i , j ) > 0 ) then ! surface k = 1 src ( i , k , j ,:) = src ( i , k , j , n ) + surface_flux ( i , j , n ) / dz ( i , k , j ) ! bottom k = kmt ( i , j ) src ( i , k , j ,:) = src ( i , k , j , n ) + bottom_flux ( i , j , n ) / dz ( i , k , j ) end if end do end do end do #endif ! vertical velocities do j = js , je do k = 1 , km !         call model%get_vertical_movement(is,ie,k,j,w) end do end do call model % finalize_outputs () !stop 120 end subroutine fabm_update !----------------------------------------------------------------------- subroutine fabm_clean () !! de-allocate all allocated arrays if ( allocated ( windspeed )) deallocate ( windspeed ) !if (allocated(windspeed)) deallocate(windspeed) !if (allocated(windspeed)) deallocate(windspeed) if ( allocated ( salt )) deallocate ( salt ) if ( allocated ( rho_fabm )) deallocate ( rho_fabm ) ! : ! : end subroutine fabm_clean !----------------------------------------------------------------------- subroutine update_data ( joff ) integer , intent ( in ) :: joff !! offset row in global window !! update all time varying FABM configured external dependencies !! by calling individual update routines - tests done in routines call update_wind () call update_mole_fraction_of_carbon_dioxide_in_air () call update_surface_downwelling_shortwave_flux () call update_bottom_stress ( joff ) call update_salinity () call update_density () end subroutine update_data !----------------------------------------------------------------------- subroutine link_grid () !! Allocate and link grid related FABM standard variables that !! are being transformed from UVic native variables [cm -> m]. integer :: rc integer :: i , j , k #if 1 allocate ( depth ( _ I_ , _ K_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_grid(): Error allocating (depth)' depth = 0._rke allocate ( pressure ( _ I_ , _ K_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_grid(): Error allocating (pressure)' pressure = 0._rke allocate ( dz ( _ I_ , _ K_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_grid(): Error allocating (dz)' dz = 0._rke #if 0 do j = 1 , jmt do i = 1 , imt #else do j = 2 , jmt - 1 do i = 2 , imt - 1 #endif if ( kmt ( i , j ) > 0 ) then depth ( i ,:, j ) = zt / 10 0._rke pressure ( i ,:, j ) = depth ( i ,:, j ) / 1 0._rke dz ( i ,:, j ) = dzt / 10 0._rke end if end do end do #else allocate ( depth ( imt , km , jmt ), stat = rc ) if ( rc /= 0 ) stop 'link_grid(): Error allocating (depth)' depth = 0._rke allocate ( pressure ( imt , km , jmt ), stat = rc ) if ( rc /= 0 ) stop 'link_grid(): Error allocating (pressure)' pressure = 0._rke allocate ( dz ( imt , km , jmt ), stat = rc ) if ( rc /= 0 ) stop 'link_grid(): Error allocating (dz)' dz = 0._rke do j = 1 , jmt do i = 1 , imt if ( kmt ( i , j ) > 0 ) then depth ( i ,:, j ) = zt / 10 0._rke pressure ( i ,:, j ) = depth ( i ,:, j ) / 1 0._rke dz ( i ,:, j ) = dzt / 10 0._rke end if end do end do #endif call model % link_interior_data ( fabm_standard_variables % depth , depth ) call model % link_interior_data ( fabm_standard_variables % pressure , pressure ) call model % link_interior_data ( fabm_standard_variables % cell_thickness , dz ) #if 0 print * , depth ( 53 ,:, 53 ), pressure (: 53 ,:, 53 ), dz ( 53 ,:, 53 ) stop 'egon' #endif end subroutine link_grid !----------------------------------------------------------------------- subroutine link_wind () !! get wind speed FABM standard variable and if needed by FABM !! allocate memory integer rc id_windspeed = model % get_horizontal_variable_id ( standard_variables % wind_speed ) if ( model % variable_needs_values ( id_windspeed )) then allocate ( windspeed ( _ I_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_wind(): Error allocating (windspeed)' windspeed = 0._rke call model % link_horizontal_data ( id_windspeed , windspeed ) end if end subroutine link_wind !----------------------------------------------------------------------- subroutine update_wind () !! calculate wind speed in m/s according to !! w = w_{UVic}/100 ! calculate the wind speed in m/s - iws, iaws integer i , j if ( model % variable_needs_values ( id_windspeed )) then #if 0 do j = 1 , jmt do i = 1 , imt #else do j = 2 , jmt - 1 do i = 2 , imt - 1 #endif if ( kmt ( i , j ) > 0 ) windspeed ( i , j ) = sbc ( i , j , iws ) / 10 0._rke end do end do end if end subroutine update_wind !----------------------------------------------------------------------- subroutine link_mole_fraction_of_carbon_dioxide_in_air () integer i , j , rc id_mole_fraction_of_carbon_dioxide_in_air = model % & get_horizontal_variable_id ( standard_variables % & mole_fraction_of_carbon_dioxide_in_air ) if ( model % variable_needs_values ( id_mole_fraction_of_carbon_dioxide_in_air )) then allocate ( mole_fraction_of_carbon_dioxide_in_air ( _ I_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_mole_fraction_of_carbon_dioxide_in_air(): Error allocating (mole_fraction_of_carbon_dioxide_in_air)' mole_fraction_of_carbon_dioxide_in_air = 0._rke call model % link_horizontal_data ( id_mole_fraction_of_carbon_dioxide_in_air , mole_fraction_of_carbon_dioxide_in_air ) end if end subroutine link_mole_fraction_of_carbon_dioxide_in_air !----------------------------------------------------------------------- subroutine update_mole_fraction_of_carbon_dioxide_in_air () !! calculate the ?????? in W/m&#94;2 integer i , j if ( model % variable_needs_values ( id_mole_fraction_of_carbon_dioxide_in_air )) then #if 0 do j = 1 , jmt do i = 1 , imt #else do j = 2 , jmt - 1 do i = 2 , imt - 1 #endif if ( kmt ( i , j ) > 0 ) mole_fraction_of_carbon_dioxide_in_air ( i , j ) = 1 0._rke !KB end do end do end if end subroutine update_mole_fraction_of_carbon_dioxide_in_air !----------------------------------------------------------------------- subroutine link_surface_downwelling_shortwave_flux () integer rc id_surface_downwelling_shortwave_flux = model % & get_horizontal_variable_id ( standard_variables % & surface_downwelling_shortwave_flux ) if ( model % variable_needs_values ( id_surface_downwelling_shortwave_flux )) then allocate ( surface_downwelling_shortwave_flux ( _ I_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_surface_downwelling_shortwave_flux(): Error allocating (surface_downwelling_shortwave_flux)' surface_downwelling_shortwave_flux = 0._rke call model % link_horizontal_data ( id_surface_downwelling_shortwave_flux , surface_downwelling_shortwave_flux ) end if end subroutine link_surface_downwelling_shortwave_flux !----------------------------------------------------------------------- subroutine update_surface_downwelling_shortwave_flux () !! calculate the short wave flux in W/m&#94;2 integer i , j if ( model % variable_needs_values ( id_surface_downwelling_shortwave_flux )) then #if 0 do j = 1 , jmt do i = 1 , imt #else do j = 2 , jmt - 1 do i = 2 , imt - 1 #endif if ( kmt ( i , j ) > 0 ) surface_downwelling_shortwave_flux ( i , j ) = 20 0._rke !KB end do end do end if end subroutine update_surface_downwelling_shortwave_flux !----------------------------------------------------------------------- subroutine link_bottom_stress () !! get bottom stress FABM standard variable and if needed by FABM !! allocate memory integer rc id_bottom_stress = model % get_horizontal_variable_id ( standard_variables % bottom_stress ) if ( model % variable_needs_values ( id_bottom_stress )) then allocate ( bottom_stress ( _ I_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_bottom_stress(): Error allocating (bottom_stress)' bottom_stress = 0._rke call model % link_horizontal_data ( id_bottom_stress , bottom_stress ) end if end subroutine link_bottom_stress !----------------------------------------------------------------------- subroutine update_bottom_stress ( joff ) !! calculate the bottom stress in Pa integer , intent ( in ) :: joff !! offset row in global window real ( rke ), parameter :: x = 1 0._rke ! dynes/cm2 --> Pa integer i , j , jrow if ( model % variable_needs_values ( id_bottom_stress )) then #if 0 do j = 1 , jmt jrow = j + joff do i = 1 , imt #else do j = 2 , jmt - 1 jrow = j + joff do i = 2 , imt - 1 #endif if ( kmt ( i , jrow ) > 0 ) bottom_stress ( i , j ) = x * sqrt ( & bmf ( i , jrow , 1 ) ** 2 + bmf ( i , jrow , 2 ) ** 2 ) !            if (kmt(i,j) > 0) bottom_stress(i,j) =  0.001_rke !KB end do end do end if end subroutine update_bottom_stress !----------------------------------------------------------------------- subroutine link_salinity () !! get salinity FABM standard variable and if needed by FABM allocate !! memory integer rc id_practical_salinity = model % get_interior_variable_id ( fabm_standard_variables % practical_salinity ) if ( model % variable_needs_values ( id_practical_salinity )) then allocate ( salt ( _ I_ , _ K_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_salinity(): Error allocating (salt)' salt = 0._rke call model % link_interior_data ( id_practical_salinity , salt ) end if end subroutine link_salinity !----------------------------------------------------------------------- subroutine update_salinity () !! calculate salinity in PSU according to S = 35 + 1000*S_{UVic} integer i , j , k if ( model % variable_needs_values ( id_practical_salinity )) then #if 0 do j = 1 , jmt do k = 1 , km do i = 1 , imt #else do j = 2 , jmt - 1 do k = 1 , km do i = 2 , imt - 1 #endif if ( kmt ( i , j ) > 0 ) salt ( i , k , j ) = 3 5._rk + 100 0._rke * t ( i , k , j , isalt , 0 ) end do end do end do end if end subroutine update_salinity !----------------------------------------------------------------------- subroutine link_density () !! get density FABM standard variable and if needed by FABM allocate !! memory integer rc id_density = model % get_interior_variable_id ( fabm_standard_variables % density ) if ( model % variable_needs_values ( id_density )) then allocate ( rho_fabm ( _ I_ , _ K_ , _ J_ ), stat = rc ) if ( rc /= 0 ) stop 'link_density(): Error allocating (rho_fabm)' rho_fabm = 0._rke call model % link_interior_data ( id_density , rho_fabm ) end if end subroutine link_density !----------------------------------------------------------------------- subroutine update_density () !! calculate density in kg/m³ according to !! \\rho = 1000*(\\rho_0 + \\rho_{UVic}) !! with \\rho_0 = 1.035. MUST match rho0 from UVic_ESCM.F90 !! @note !! loadmw.F: l 154 !! !! imt=102, km=19, jsmw=2, jmw=jmt --- jemw=jmw-1 !! !! declared: rho(imt,km,jsmw:jmw) calculated rho(1:102,2:102) rho !! @endnote !! @note !! KB check depth dependent reference density !! @endnote integer i , j , k real ( rke ), parameter :: rho0 = 1.035 if ( model % variable_needs_values ( id_density )) then !do j=1,jmt do j = jsmw , jmw ! must be 2:102 do k = 1 , km #if 0 do i = 1 , imt #else do i = 2 , imt - 1 #endif if ( kmt ( i , j ) > 0 ) rho_fabm ( i , k , j ) = 100 0._rke * ( rho0 + rho ( i , k , j )) end do end do end do end if #if 0 print * , rho_fabm ( 53 ,:, 53 ) stop 'kurt' #endif end subroutine update_density !----------------------------------------------------------------------- #endif end module uvic_fabm !----------------------------------------------------------------------- !MVV: associate( MNV => model%variable_needs_values ) !MHG: associate( MHGV => model%get_horizontal_variable_id ) !MIG: associate( MIGV => model%get_horizontal_variable_id )","tags":"","loc":"sourcefile/uvic_fabm.f90.html"},{"title":"Documentation – FABM in UVic","text":"Background In the EU-funded project OceanICU (grant agreement no. 101083922) a subtask is to enable the climate model UVic-ESCM to use the various bio-geochemical models availabe via FABM .","tags":"","loc":"page/index.html"},{"title":"Compiling UVic-ESCM with FABM support – FABM in UVic","text":"","tags":"","loc":"page/compilation/index.html"},{"title":"Egon – FABM in UVic","text":"","tags":"","loc":"page/egon/index.html"}]}